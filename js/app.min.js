const header = document.querySelector(".header");
function updateCounter(a, c) {
  let b = document.querySelector(".counter__number");
  (b.textContent = a > 9 ? a : `0${a}`),
    (b.style.color = "light" === c ? "#fff" : "#232323");
}
function loadImage(a) {
  a.dataset.src
    ? ((a.src = a.dataset.src), a.removeAttribute("data-src"))
    : a.dataset.srcset &&
      ((a.srcset = a.dataset.srcset), a.removeAttribute("data-srcset")),
    (a.onload = () => {
      let b = a.parentElement;
      a.classList.add("lazy-image--loaded"),
        b.classList.add("lazy-wrapper--loaded");
    });
}
const headerHandler = () => {
    let a = document.querySelector(".header__burger"),
      b = document.querySelector(".header__menu");
    a.addEventListener("click", () => {
      a.classList.toggle("clicked"),
        b.classList.toggle("clicked"),
        document.body.classList.toggle("lock");
    }),
      window.scrollY > 0
        ? header.classList.add("scrolled")
        : header.classList.remove("scrolled"),
      window.addEventListener("scroll", () => {
        window.scrollY > 0
          ? header.classList.add("scrolled")
          : header.classList.remove("scrolled");
      });
  },
  sliders = () => {
    let a = (a) => ({
      slidesPerView: 1,
      speed: 850,
      loop: !0,
      autoHeight: !0,
      effect: "fade",
      fadeEffect: { crossFade: !0 },
      navigation: { nextEl: `.${a}__next` },
      pagination: { el: `.${a}__pagination`, type: "bullets", clickable: !0 },
      preloadImages: !1,
      lazy: { loadPrevNext: !0 },
    });
    if (
      (document.querySelector(".project") &&
        new Swiper(".project__slider", a("project")),
      document.querySelector(".feedback") &&
        new Swiper(".feedback__slider", a("feedback")),
      document.querySelector(".page"))
    ) {
      let c = document.querySelector(".wrapper"),
        b = new Swiper(".page", {
          wrapperClass: "page__wrapper",
          slideClass: "page__screen",
          direction: "vertical",
          slidesPerView: "auto",
          speed: 900,
          init: !1,
          loop: !1,
          mousewheel: { sensitivity: 1 },
          keyboard: { enabled: !0, onlyInViewport: !0, pageUpDown: !0 },
          watchOverflow: !0,
          observer: !0,
          observeParents: !0,
          observeSlideChildren: !0,
          scrollbar: {
            el: ".page__scroll",
            dragClass: "page__drag-scroll",
            draggable: !0,
          },
          preloadImages: !1,
          lazy: { loadPrevNext: !0 },
          on: {
            init(a) {
              d(), scrollProgress(a);
              let b = a.realIndex,
                e = a.slides[b],
                f = e.querySelectorAll("img[data-src], source[data-srcset]");
              if (
                (f.forEach((a) => loadImage(a)),
                header
                  .querySelectorAll("[data-src], [data-srcset]")
                  .forEach((a) => loadImage(a)),
                b + 1 < a.slides.length)
              ) {
                let g = a.slides[b + 1],
                  c = g.querySelectorAll("img[data-src], source[data-srcset]");
                c.length > 0 && c.forEach((a) => loadImage(a));
              }
            },
            slideChange(a) {
              let b = a.realIndex,
                d = a.slides[b],
                e = a.previousIndex;
              if (b + 1 < a.slides.length) {
                let f = a.slides[b + 1],
                  c = f.querySelectorAll("img[data-src], source[data-srcset]");
                c.length > 0 && c.forEach((a) => loadImage(a));
              }
              b > e
                ? header.classList.add("scrolled")
                : 0 === b &&
                  setTimeout(() => {
                    header.classList.remove("scrolled");
                  }, 0.8 * a.params.speed);
              let g = d.getAttribute("data-section");
              setTimeout(() => {
                updateCounter(b + 1, g);
              }, a.params.speed / 2);
            },
            resize() {
              d();
            },
          },
        });
      function d() {
        for (let a = 0; a < b.slides.length; a++) {
          let e = b.slides[a],
            d = e.querySelector(".page__body");
          if (d) {
            let f = d.clientHeight;
            if (f + header.clientHeight > window.innerHeight) {
              lazyload(),
                c.classList.add("freeMode"),
                scrollProgress(b),
                0 !== b.realIndex && window.location.reload(),
                b.destroy(!1, !0);
              break;
            }
          }
        }
      }
      b.init();
    } else lazyload();
  },
  ymap = () => {
    let b = document.querySelector(".contacts");
    function c() {
      "undefined" != typeof ymaps &&
        (document.getElementById("ymap"),
        ymaps.ready(function () {
          let a = new ymaps.Map("ymap", {
              center: [55.75010809089388, 37.542542742533165],
              zoom: 17,
              controls: ["zoomControl"],
              behaviors: ["drag"],
            }),
            b = new ymaps.Placemark(
              [55.75010809089388, 37.542542742533165],
              {
                hintContent: "Top Design",
                balloonContent:
                  "\u0433.\u041C\u043E\u0441\u043A\u0432\u0430, \u0412\u044B\u0441\u0442\u0430\u0432\u043E\u0447\u043D\u0430\u044F \u043D\u0430\u0431\u0435\u0440\u0435\u0436\u043D\u0430\u044F 45, 10 \u044D\u0442\u0430\u0436, \u043F\u043E\u043C\u043C. 1003",
              },
              { preset: "islands#icon", iconColor: "#F18B39" }
            );
          a.geoObjects.add(b);
        }));
    }
    function a() {
      let e = b.getBoundingClientRect().top,
        c = window.pageYOffset;
      c + window.innerHeight > e + c &&
        (d(), window.removeEventListener("scroll", a));
    }
    function d() {
      let a = document.createElement("script");
      (a.src = "https://api-maps.yandex.ru/2.1/?lang=ru_RU"),
        document.body.appendChild(a),
        (a.onload = c);
    }
    b && (window.addEventListener("scroll", a), a());
  },
  scrollProgress = (e) => {
    let a = Array.from(e.slides);
    if (a.length <= 0) return;
    let f = [],
      c = 0;
    for (let b = 0; b < a.length; b++)
      f.push({ section: a[b], coordinates: [c, c + a[b].offsetHeight] }),
        (c += a[b].offsetHeight);
    function d() {
      let c = window.scrollY + window.innerHeight / 2,
        b = g(c);
      if (b) {
        let d = a.indexOf(b) + 1,
          e = b.getAttribute("data-section");
        updateCounter(d, e);
      }
    }
    function g(c) {
      for (let a = 0; a < f.length; a++) {
        let b = f[a];
        if (c >= b.coordinates[0] && c < b.coordinates[1]) return b.section;
      }
      return 0;
    }
    window.addEventListener("scroll", d), d();
  },
  lazyload = () => {
    let a = { root: null, rootMargin: "0px", threshold: 0.1 },
      c = new IntersectionObserver((a, b) => {
        a.forEach((a) => {
          if (a.isIntersecting) {
            let c = a.target;
            loadImage(c), b.unobserve(c);
          }
        });
      }, a),
      b = document.querySelectorAll("img[data-src], source[data-srcset]");
    b.forEach((a) => c.observe(a));
  };
window.onload = () => {
  sliders(), headerHandler(), ymap();
  let a = document.getElementById("scene");
  a && new Parallax(a);
};
